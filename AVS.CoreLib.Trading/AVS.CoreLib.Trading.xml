<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AVS.CoreLib.Trading</name>
    </assembly>
    <members>
        <member name="T:AVS.CoreLib.Trading.Abstractions.IBar">
            <summary>
            represent a bar chart unit (synonym candle or simply bar)  
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Abstractions.IBar.Total">
            <summary>
            Amount of quote asset
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Abstractions.IOhlcv.Volume">
            <summary>
            Amount of base asset
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Abstractions.IMutOhlcv.Volume">
            <summary>
            Amount of base asset
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Abstractions.TA.IBag">
            <summary>
            Represent a container (bag) of decimal (simple) values and object values
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Abstractions.TA.IXBar">
            <summary>
            XBar is <see cref="T:AVS.CoreLib.Trading.Abstractions.IBar"/> with extra properties such as calculated lengths, avg price, size, type etc.
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Abstractions.TA.IXBar.Type">
            <summary>
            Indicates the bar is bullish or bearish
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Abstractions.TA.IXBar.Length">
            <summary>
            Bar Length in %, formula: 100*(High - Low)/Low
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Abstractions.TA.IXBar.BodyLength">
            <summary>
            Candle body length in %, , formula: 100*  (Bullish ? (Close - Open)/Open : (Open - Close)/Close)
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Abstractions.TA.IXBar.Avg">
            <summary>
            (Open+Close)/2
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Abstractions.TA.IXBar.Hl2">
            <summary>
            (High+Low)/2
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Abstractions.TA.IXBar.Hlc3">
            <summary>
            (High+Low+Close)/3
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Abstractions.TA.IXBar.SizeAbs">
            <summary>
            absolute size based on a timeframe 
            regardless avg bar length
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Abstractions.TA.IXBar.TA">
            <summary>
            TA extension adds calculated values based on moving statistic like ATR, MA, RSI etc.         
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Abstractions.TA.IXBar.Size">
            <summary>
            Indicates how big (long) the bar is relative to avg length
            avg length is sma(Length, 12)
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Abstractions.TA.IXBar.VolumeSize">
            <summary>
            Indicates how big volume is relative to avg volume        
            avg volumw is sma(Volume, 12)
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Collections.CurrencyCollection.System#Collections#Generic#ICollection{System#String}#Add(System.String)">
            <summary>
            the Add method implemented explicitly due to model binding mechanics 
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Collections.StringCollection">
            <summary>
            base type to make bind-able string[] parameter type <see cref="T:AVS.CoreLib.Trading.Collections.Exchanges"/>
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Collections.StringCollection.System#Collections#Generic#ICollection{System#String}#Add(System.String)">
            <summary>
            the Add method implemented explicitly due to model binding mechanics 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.ServiceCollectionExtension.AddTradingCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add trading formatters core services
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.BarSize">
            <summary>
            Classify bar by length 
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.BarSize.Short">
            <summary>
            short bar is a bar with a little price difference between Low and High
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.BarSize.Long">
            <summary>
            Long bar is a bar with a significant a few (2-3) times bigger than average bar
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.BarSize.Paranormal">
            <summary>
            Extreme big or paranormal bar is a bar with a significant length several times bigger than average bar
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.VolumeSize.Reduced">
            <summary>
            2 times smaller volume than the average volume for the last 12 bars
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.VolumeSize.Increased">
            <summary>
            2 times bigger volume than the average volume for the last 12 bars
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.BarType.None">
            <summary>
            doji Open=Close
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.BarType.Bearish">
            <summary>
            Open > Close
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:AVS.CoreLib.Trading.Enums.BarType.Bullish" -->
        <member name="F:AVS.CoreLib.Trading.Enums.CandleType.Doji">
            <summary>
            opens and closes at the same price with bi-directional price fluctuation
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.CandleType.Gravestone">
            <summary>
            open and close at the same price with upper price fluctuation
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.CandleType.Dragonfly">
            <summary>
            open and close at the same price with down price fluctuation
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.CandleType.Whirligig">
            <summary>
            High - Open = Close - Low or High - Close = Open - Low with short body
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.CandleType.HangingMan">
            <summary>
            ohlc.High == ohlc.Open and ohlc.Close - ohlc.Low > body * 2
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.CandleType.InverseHammer">
            <summary>
            ohlc.Low == ohlc.Open and ohlc.High - ohlc.Close > body * 2
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.CandleType.ShootingStar">
            <summary>
            ohlc.Low == ohlc.Close and ohlc.High - ohlc.Open > body * 2
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.Bars.Color">
            <summary>
            Represents a 2 color + neutral (none) enum
            Used to color MA/BB and other simply indicating bearish/bullish direction with a color
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.CoinCap.BigCap">
            <summary>
            1+ billion ~ top 50 coins
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.CoinCap.MidCap">
            <summary>
            250M+ (rank 50 - 125)
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.CoinCap.SmallCap">
            <summary>
            50M - 250M (rank 125-375)
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.CoinCap.MicroCap">
            <summary>
            2M - 50M (rank 375-1200)
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.CoinCap.SeedCap">
            <summary>
            200k - 2M (rank 1200 - 2000)
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.AssetClass.Top">
            <summary>
            Top BTC;ETH;BNB;XRP
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.AssetClass.TopRelated">
            <summary>
            Ecosystem around Top asset for example: ETH-> UNI,AAVE, MKR; TRX -> SUN,JST,APENFT
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.AssetClass.SecondTier">
            <summary>
            DASH, XMR, EOS, BCH,FIL etc.
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.AssetClass.Other">
            <summary>
            3rd tier or other coins with not prominent even weak perspectives like XEM etc.
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.AssetClass.Blud">
            <summary>
            DOGE, SHIB, FLOKI etc.
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.AssetClass.DarkHorse">
            <summary>
            things like PARA, THETA etc.
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.AssetClass.Shit">
            <summary>
            dangerous things that has no or very poor fundamental, and might scam
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason">
            <summary>
            Account update reason
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.Deposit">
            <summary>
            Deposit
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.Withdraw">
            <summary>
            Withdraw
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.FundingFee">
            <summary>
            Funding Fee
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.WithdrawReject">
            <summary>
            Withdraw Reject
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.Adjustment">
            <summary>
            Adjustment
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.InsuranceClear">
            <summary>
            Insurance Clear
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.AdminDeposit">
            <summary>
            Admin Deposit
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.AdminWithdraw">
            <summary>
            Admin Withdraw
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.MarginTransfer">
            <summary>
            Margin Transfer
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.MarginTypeChange">
            <summary>
            Margin Type Change
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.AssetTransfer">
            <summary>
             Asset Transfer
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.OptionsPremiumFee">
            <summary>
            Options Premium Fee
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.OptionsSettleProfit">
            <summary>
            Options Settle Profit
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.CoinSwapWithdraw">
            <summary>
            Coin swap withdraw
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.AccountUpdateReason.CoinSwapDeposit">
            <summary>
            Coin swap deposit
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.Futures.ContractType">
            <summary>
            Type of contract
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ContractType.Perpetual">
            <summary>
            Perpetual
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ContractType.CurrentMonth">
            <summary>
            Current month
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ContractType.CurrentQuarter">
            <summary>
            Current quarter
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ContractType.CurrentQuarterDelivering">
            <summary>
            Current quarter delivering
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ContractType.NextQuarter">
            <summary>
            Next quarter
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ContractType.NextQuarterDelivering">
            <summary>
            Next quarter delivering
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ContractType.NextMonth">
            <summary>
            Next month
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ContractType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.Futures.ExecutionType">
            <summary>
            The type of execution
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ExecutionType.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ExecutionType.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ExecutionType.Replaced">
            <summary>
            Replaced
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ExecutionType.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ExecutionType.Trade">
            <summary>
            Trade
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ExecutionType.Expired">
            <summary>
            Expired
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ExecutionType.Amendment">
            <summary>
            Amendment
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.ExecutionType.TradePrevention">
            <summary>
            Self trade prevented
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.Futures.FuturesOrderType">
            <summary>
            Order type for a futures order
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.FuturesOrderType.Limit">
            <summary>
            Limit orders will be placed at a specific price. If the price isn't available in the order book for that asset the order will be added in the order book for someone to fill.
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.FuturesOrderType.Market">
            <summary>
            Market order will be placed without a price. The order will be executed at the best price available at that time in the order book.
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.FuturesOrderType.Stop">
            <summary>
            Stop order. Execute a limit order when price reaches a specific Stop price
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.FuturesOrderType.StopMarket">
            <summary>
            Stop market order. Execute a market order when price reaches a specific Stop price
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.FuturesOrderType.TakeProfit">
            <summary>
            Take profit order. Will execute a limit order when the price rises above a price to sell and therefor take a profit
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.FuturesOrderType.TakeProfitMarket">
            <summary>
            Take profit market order. Will execute a market order when the price rises above a price to sell and therefor take a profit
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.FuturesOrderType.TrailingStopMarket">
            <summary>
            A trailing stop order will execute an order when the price drops below a certain percentage from its all time high since the order was activated
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.FuturesOrderType.Liquidation">
            <summary>
            A liquidation order
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.Futures.IncomeType">
            <summary>
            Type of futures income
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.COMMISSION">
            <summary>
            Futures trading commission
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.FUNDING_FEE">
            <summary>
            Futures funding fee
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.REALIZED_PNL">
            <summary>
            Futures realized profit
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.TRANSFER">
            <summary>
            Transfer into account
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.WELCOME_BONUS">
            <summary>
            Futures welcome bonus
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.INSURANCE_CLEAR">
            <summary>
            Insurance clear
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.REFERRAL_KICKBACK">
            <summary>
            Referral kickback
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.COMMISSION_REBATE">
            <summary>
            Commission rebate
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.API_REBATE">
            <summary>
            Api rebate
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.CONTEST_REWARD">
            <summary>
            Contest reward
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.CrossCollateralTransfer">
            <summary>
            Cross collateral transfer
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.OPTIONS_PREMIUM_FEE">
            <summary>
            Options premium fee
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.OPTIONS_SETTLEMENT_PROFIT">
            <summary>
            Options settle profit
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.INTERNAL_TRANSFER">
            <summary>
            Internal transfer
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.AUTO_EXCHANGE">
            <summary>
            Auto exchange
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.DELIVERED_SETTLEMENT">
            <summary>
            Delivered settlement
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.COIN_SWAP_DEPOSIT">
            <summary>
            Coin swap deposit
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.COIN_SWAP_WITHDRAW">
            <summary>
            Coin swap withdraw
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.IncomeType.POSITION_LIMIT_INCREASE_FEE">
            <summary>
            Position limit increase fee
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.Futures.PositionSide">
            <summary>
            Position mode
            1. One-way mode [DEFAULT] - you can only hold positions in one direction under one contract.
               Opening positions in both directions would cancel one another out or reduce their sizes.
            
            2. Hedge mode - you can simultaneously hold positions in both long and short directions under the same contract.
               If you open long position on higher TF, but anticipate that in short term the price will move down, you want to open a short position as well
            </summary>
            <remarks>
            Hedge mode is a trading strategy used by futures traders to mitigate their risk exposure to the market. It involves opening two opposite positions, a long and a short, to profit from any market movement while minimizing potential losses.
            </remarks>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.PositionSide.Both">
            <summary>
            In ONE-WAY mode they return BOTH i.e. you can identify the actual long/short direction by amount sign
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.Futures.Direction">
            <summary>
            clearly defines position direction SHORT / LONG
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.Direction.None">
            <summary>
            Undefined means position amount is 0 
            On practice the exchange will close current position, and open a new one with the next trade
            But for testing purposes it's easier to track one position instead of multiple small ones
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.Futures.WorkingType">
            <summary>
            Type of working
            Stop price is triggered by: "MARK_PRICE" or "CONTRACT_PRICE". Default "CONTRACT_PRICE") 
            </summary>
            <remarks>
            MARK PRICE refers to an estimated true value of a contract, it takes into consideration the fair value of an asset
            to prevent unnecessary liquidations during a volatile market
            Calculated as an average of the Last Price and the underlying asset’s Spot Price to avoid price manipulation of a single order book or exchange.
            (проливы и пампы и даже тыки цены на минутке все равно стопы рвёт так что сглаживание ну такое себе, хотя может потому что by default is Contract price)
            </remarks>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.WorkingType.Contract">
            <summary>
            Contract price type
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.Futures.WorkingType.Mark">
            <summary>
            Mark price type
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.OrderCondition.BuyIfAskRise">
            <summary>
            когда мы собираемся войти в рынок в long как только будет преодолена трендовая линия
            но текущая цена ниже чем та по которой мы хотим купить
            к примеру текущая цена 400$ а мы ждем пока преодолеем уровень 500$ 
            и  только тогда затариваемся в лонг
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.OrderCondition.SellIfBidFall">
            <summary>
            когда мы собираемся войти в рынок в short при падении ниже трендовой линии
            но текущая цена пока выше и не понятно будет ли дальнейшее снижение
            например: текущая цена 500$ а мы ждем падения ниже линии до 400$ только тогда открываем шорт
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.OrderResponseType">
            <summary>
            Response type
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.OrderResponseType.Acknowledge">
            <summary>
            Ack only
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.OrderResponseType.Result">
            <summary>
            Resulting order
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.OrderResponseType.Full">
            <summary>
            Full order info, only valid on SPOT orders  
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.OrderType.Limit">
            <summary>
            Limit orders will be placed at a specific price. If the price isn't available in the order book for that asset the order will be added in the order book for someone to fill.
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.OrderType.Market">
            <summary>
            Market order will be placed without a price. The order will be executed at the best price available at that time in the order book.
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.OrderType.LimitMaker">
            <summary>
            Maker or "post-only" order is a conditional limit order, that serves to add liquidity to the order book so it is charged with a maker fee. 
            If order price crosses market spread the order will be rejected.
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.OrderType.Stop">
            <summary>
            Stop order. Execute a limit order when price reaches a specific Stop price
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.OrderType.StopMarket">
            <summary>
            Stop market order. Execute a market order when price reaches a specific Stop price
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.OrderType.TakeProfit">
            <summary>
            Take profit order. Will execute a limit order when the price rises above a price to sell and therefor take a profit
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.OrderType.TakeProfitMarket">
            <summary>
            Take profit market order. Will execute a market order when the price rises above a price to sell and therefor take a profit
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.OrderType.TrailingStopMarket">
            <summary>
            A trailing stop order will execute an order when the price drops below a certain percentage from its all time high since the order was activated
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.SymbolFormat.Normalized">
            <summary>
            BTC_USDT
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.SymbolFormat.NoUnderscore">
            <summary>
            BTCUSDT
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.SymbolFormat.LowerCase">
            <summary>
            btcusdt
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.SymbolFormat.Flipped">
            <summary>
            USDT_BTC
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.IndicatorType.Overlay">
            <summary>
            same scale as asset price, plotted directly on a price chart. 
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.IndicatorType.Oscillator">
            <summary>
            oscillate between a local minimum and maximum, plotted below price chart
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.MAType.HMA">
            <summary>
            Hull MA
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.TA.Slope">
            <summary>
            indicator line slope
            moving average slope or stochastic etc. curve 
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.Slope.None">
            <summary>
            no clear slope detected
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.Slope.SteepBearish">
            <summary>
            indicates that the curve clearly moves down fast
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.Slope.Bearish">
            <summary>
            indicates that the curve moves down slowly   
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.Slope.Bullish">
            <summary>
            indicates that the curve moves up slowly
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.Slope.SteepBullish">
            <summary>
            indicates that the curve clearly moves up fast
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.MarketPhase.UpTrend">
            <summary>
            Цены двигаются вверх, формируя Higher Highs and Higher Lows
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.MarketPhase.DownTrend">
            <summary>
            Цены двигаются вниз, формируя Lower Highs and Lower Lows
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.MarketPhase.Range">
            <summary>
            Цены колеблются в узком диапазоне
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.MarketPhase.Swings">
            <summary>
            рынок не показывает явного направления и двигается в пределах определенных уровней поддержки и сопротивления
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.MarketPhase.Consolidation">
            <summary>
            рынок временно замедляет движение после активного тренда
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.MarketPhase.Retracement">
            <summary>
            коррекционное движение против общего направления тренда
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TA.Signal.Danger">
            <summary>
            Danger for cases when there are signs of possible agressive bearish/bullish movement
            к примеру волатильность сужена, а индикаторы типа ADX сигналят сильный даун тренд => следует сливная елда на -20%
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.TimeFrame">
            <summary>Represents a time frame of a market.</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.S1">
            <summary> interval of 1 second </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.S30">
            <summary> interval of 30 seconds </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.M1">
            <summary>A time interval of 1 minute</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.M3">
            <summary>A time interval of 3 minutes</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.M5">
            <summary>A time interval of 5 minutes</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.M15">
            <summary>A time interval of 15 minutes</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.M30">
            <summary>A time interval of 30 minutes</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.H1">
            <summary>A time interval of 1 hour</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.H2">
            <summary>A time interval of 2 hours</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.H3">
            <summary>A time interval of 3 hours</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.H4">
            <summary>A time interval of 4 hours</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.H12">
            <summary>A time interval of 12 hours</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.D">
            <summary>A time interval of a day</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.Week">
            <summary>A time interval of 7 days</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrame.Month">
            <summary>A time interval of 30 days</summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrameType.Micro">
            <summary>
            less then 5 minutes
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrameType.Small">
            <summary>
            5M / 15M / 30M
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrameType.Intraday">
            <summary>
            1H / 4H  (from 1 hour but less than 1D)
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrameType.Day">
            <summary>
            1D
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeFrameType.Week">
            <summary>
            Week
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeInForce.GTC">
            <summary>
            good till cancel
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeInForce.IOC">
            <summary>
            immediate or cancel
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeInForce.FOK">
            <summary>
            Fill or kill
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeInForce.DAY">
            <summary>
            A day order remains in effect only for the given trading session (NYSE/Nasdaq)
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeInForce.GTX">
            <summary>
            Good Till Crossing (Post Only) 
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TimeInForce.GTE_GTC">
            <summary>
            GTE seems good till expire, GTC good till cancel
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Enums.TraderSide">
            <summary>
            trader side (Maker/Taker) usually influence an exchange's trade fees
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TraderSide.Maker">
            <summary>
            trader played a limit order 
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Enums.TraderSide.Taker">
            <summary>
            trader placed a market order
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.BarExtensions.Contains(AVS.CoreLib.Trading.Abstractions.IOhlc,System.Decimal,System.Boolean)">
            <summary>
            determines whether price is within (Low, High) range;
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.BarLengthExtensions.GetLength(AVS.CoreLib.Trading.Abstractions.IOhlc,System.Int32)">
            <summary>
            Get candle length in % formula: (High - Low)/Close * 100
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.BarLengthExtensions.GetShadowLength(AVS.CoreLib.Trading.Abstractions.IOhlc,System.Int32)">
            <summary>
            for bullish candles return upper shadow, for bearish - lower
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.BarLengthExtensions.HasLongShadow(AVS.CoreLib.Trading.Abstractions.IOhlc,System.Int32)">
            <summary>
            long shadow means bar length is a <see cref="!:k"/> times bigger than body length
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.BarLengthExtensions.GetBarSize(AVS.CoreLib.Trading.Abstractions.IOhlc,System.Decimal)">
            <summary>
            Estimate bar size based on avg bar length  
            </summary>
            <param name="ohlc">bar</param>
            <param name="avgLength">bar length in % e.g. 1% not 0.01</param>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.BarLengthExtensions.GetBarSizeAbs(AVS.CoreLib.Trading.Abstractions.IOhlc,AVS.CoreLib.Trading.Enums.TimeFrame,System.Decimal)">
            <summary>
            Estimate absolute bar size based on a timeframe and assumption that roughly avg bar size on H1 ~1.75% (1.5%-2% for big cap markets like BTC/ETH/TRX etc.)
            Thus we can omit avg bar length calculation, hence the absolute size as it is estimated comparatively to absolute mean
            </summary>
            <param name="ohlc">bar</param>
            <param name="timeFrame">timeframe</param>
            <param name="avgH1Length">(optional)</param>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.DecimalExtensions.Deduct(System.Decimal,System.Decimal)">
            <summary>
            deducts specified percent from the value
            e.g. commission 0.25%, buy 100 xrp in real you will get 100-0.25% = 99.75 xrp 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.TimeFrameExtensions.CalcTimespan(AVS.CoreLib.Trading.Enums.TimeFrame,System.Int32)">
            <summary>
            Calculate timespan = (int)timeframe x count 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.TimeFrameExtensions.CalcBarCount(AVS.CoreLib.Trading.Enums.TimeFrame,System.Double)">
            <summary>
            Calculate bar count = period / (int)timeframe
            i.e. how many bars (count) cover the specified period
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.TimeFrameExtensions.CalcBarCountFrom(AVS.CoreLib.Trading.Enums.TimeFrame,System.DateTime)">
            <summary>
            Calculate bar count from <see cref="!:fromDate"/> till <see cref="P:System.DateTime.Now"/>
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.TimeFrameExtensions.GetVolatilityByTimeFrame(AVS.CoreLib.Trading.Enums.TimeFrame)">
            <summary>
            Volatility is kind of average* bar length at a given scale (timeframe)
            *average calculated taking into account only normal-size bars, similar princip as for ATR (short, long and paranormal bars are ignored as they are unusual)
            e.g.. tf:D ~7-8%, tf:H1 ~ 1.2-1.8%
            for some assets it could differ but in most cases ATR bar will 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.FormatNumberExtensions.FormatPrices(System.Double[],System.String)">
            <summary>
            format numbers to string using n.FormatPrice()
            leading zeros will be replaced by replacement
            (e.g. 0.0001234 => 0..1234) 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.NumberExtensions.GetLeastExpDiff(System.Double,System.Double)">
            <summary>
            Determines the lowest exp for the value so the value*10^exp. > n
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.NumberExtensions.Normalize(System.Double)">
            <summary>
            Rounds value to 8 digits AwayFromZero
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.OhlcExtensions.GetCandleType(AVS.CoreLib.Trading.Abstractions.IOhlc)">
            <summary>
            not implemented to classify all candle types but some basic candle classification is possible
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.PriceExtensions.IsAboutTheSame(System.Decimal,System.Decimal,System.Nullable{System.Decimal})">
            <summary>
            compare prices if price difference is tiny returns true (about the same), otherwise false
            when tolerance is not provided, comparison relies on price meaningful digits
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Extensions.SymbolExtensions">
            <summary>
            supposed to deal with a normalized symbol like BTC_USDT (i.e. currencies are upper case, underscore separator)
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.SymbolExtensions.Q(System.String,AVS.CoreLib.Trading.Enums.SymbolFormat,System.Boolean)">
            <summary>
            returns quote currency, when possible replace currency iso code with symbol e.g. USDT => $
            <seealso cref="M:AVS.CoreLib.Trading.Helpers.CoinHelper.GetCurrencySymbol(System.String)"/>
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.SymbolExtensions.B(System.String,AVS.CoreLib.Trading.Enums.SymbolFormat)">
            <summary>
            returns base currency for BTC_USDT => BTC
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.SymbolExtensions.Normalize(System.String,AVS.CoreLib.Trading.Enums.SymbolFormat)">
            <summary>
            normalize symbol e.g. btcusdt => BTC_USDT
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.SymbolPatternExtensions.Match(System.String,AVS.CoreLib.Trading.Types.SymbolPattern)">
            <summary>
            match symbol (e.g. `BTC_USDT`) with a symbol pattern (e.g. `USDT*`) <see cref="T:AVS.CoreLib.Trading.Types.SymbolPattern"/>
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.SymbolPatternExtensions.Match(System.String[],AVS.CoreLib.Trading.Types.SymbolPattern)">
            <summary>
            if any symbol matches pattern <see cref="T:AVS.CoreLib.Trading.Types.SymbolPattern"/> returns true, otherwise false 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.SymbolPatternExtensions.Filter(System.String[],System.String)">
            <summary>
            filter symbols applying symbol pattern (filter) <see cref="T:AVS.CoreLib.Trading.Types.SymbolPattern"/>
            </summary>        
        </member>
        <member name="T:AVS.CoreLib.Trading.Extensions.GenericTypeFormatterExtensions">
            <summary>
            GenericFormatter extensions
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.GenericTypeFormatterExtensions.AddTradeTypeFormatter(AVS.CoreLib.Text.Formatters.GenericFormatter.GenericTypeFormatter)">
            <summary>
            Register <see cref="T:AVS.CoreLib.Trading.Enums.TradeType"/> enum formatting
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.GenericTypeFormatterExtensions.AddOrderSideFormatter(AVS.CoreLib.Text.Formatters.GenericFormatter.GenericTypeFormatter)">
            <summary>
            Register <see cref="T:AVS.CoreLib.Trading.Enums.OrderSide"/> enum formatting
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.GenericTypeFormatterExtensions.AddPositionTypeFormatter(AVS.CoreLib.Text.Formatters.GenericFormatter.GenericTypeFormatter)">
            <summary>
            Register <see cref="T:AVS.CoreLib.Trading.Enums.PositionType"/> enum formatting
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Extensions.XFormatProviderExtensions.AddTradingFormatters(AVS.CoreLib.Text.FormatProviders.XFormatProvider)">
            <summary>
            Add string formatters
                <see cref="T:AVS.CoreLib.Trading.Formatters.PriceFormatter"/>
                <see cref="T:AVS.CoreLib.Trading.Formatters.PairStringFormatter"/>
                <see cref="T:AVS.CoreLib.Trading.Formatters.OhlcFormatter"/>
                <see cref="T:AVS.CoreLib.Trading.Formatters.CurrencySymbolFormatter"/>
            and type formatters for enums:
                <see cref="T:AVS.CoreLib.Trading.Enums.TradeType"/>
                <see cref="T:AVS.CoreLib.Trading.Enums.OrderSide"/>
                <see cref="T:AVS.CoreLib.Trading.Enums.PositionType"/>
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Formatters.CurrencySymbolFormatter.GetQualifiers">
            <summary>
            qualifiers: "$|symbol; i|iso"
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Formatters.OhlcFormatter.GetQualifiers">
            <summary>
            qualifiers: "q|quote; b|base; p|pair; Q|B|symbol"
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Formatters.PairStringFormatter.GetQualifiers">
            <summary>
            qualifiers: "q|quote; b|base; p|pair; Q|B|symbol"
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Formatters.PriceFormattedString">
            <summary>
            takes FormattableString and applies PriceFormatProvider to it => str.ToString(PriceFormatProvider.Instance)
            usage: X.Format($"amount {1.25:a}; price {9.99:price}"); 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Formatters.PriceFormattedString.op_Implicit(AVS.CoreLib.Trading.Formatters.PriceFormattedString)~System.String">
            <summary>
            this is to return PriceFormattedString as a string
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Formatters.PriceFormatter">
            <summary> 
            qualifiers: a|amount; p|price; q|qty|quantity; n|number 
            represents ICustomFormatter implementation (usually it is used by FormatProvider e.g. PriceFormatProvider) 
            usage:
            - string.Format(new PriceFormatProvider(), "amount: {1.25:a}; price: {9.99:price}");
            - X.Format($"amount {1.25:a}; price {9.99:price}"); 
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Formatters.PriceFormatter.GetQualifiers">
            <summary>
            qualifiers: a|amount; p|price; q|qty|quantity; n|number; t|total
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Formatters.PriceFormatter.CustomFormat(System.String,System.Object,System.IFormatProvider)">
            <summary>
            format double/decimal argument to string
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Formatters.T.FormatProvider">
            <summary>
            Include formatters: PriceFormatter, PairStringFormatter, TradingEnumsFormatter, CurrencySymbolFormatter
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Formatters.T.Format(System.FormattableString)">
             <summary>
             Format string with <see cref="P:AVS.CoreLib.Trading.Formatters.T.FormatProvider"/> matching trading formatters
             
             PriceFormatter qualifiers:
                 a|amount - FormatNumber(default) [3-4 decimals];
                 p|price - FormatAsPrice();
                 q|qty|quantity - FormatNumber(3)
                 t|total - FormatNumber(2)
                 N|normalized - 0.######## [PrecisionDigits]
            
             PairString qualifiers:
               q|quote - quote currency;
               b|base - base currency;
               p|pair - currency pair;
               Q - quote currency symbol
               B|$ - base currency symbol
             
             TradingEnums qualifiers:
                 `+` - +/-;
                 c|character - buy/sell;
                 n|number - int value
             
             CurrencySymbol qualifiers:
                 $|symbol - currency symbol;
                 i|iso - iso code;
             </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Formatters.TradingEnumsFormatter">
            <summary>
            This formatter is replaced with <see cref="!:CompositeFormatter"/>
            formatter for TradeType, OrderSide, PositionType enums
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Formatters.TradingEnumsFormatter.GetQualifiers">
            <summary>
            qualifiers: +; c|character; n|number
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Formatters.TradingFormatter">
            <summary>
            Combines a set of custom trading formatters such as
            <see cref="T:AVS.CoreLib.Trading.Formatters.CurrencySymbolFormatter"/>
            <see cref="T:AVS.CoreLib.Trading.Formatters.PriceFormatter"/>
            <see cref="T:AVS.CoreLib.Trading.Formatters.PairStringFormatter"/>
            <see cref="T:AVS.CoreLib.Trading.Formatters.OhlcFormatter"/>
            used by X.Format util <seealso cref="T:AVS.CoreLib.Text.FormatProviders.XFormatProvider"/>
            TradingFormatter is registered by <see cref="M:AVS.CoreLib.Trading.ServiceCollectionExtension.AddTradingCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)"/>
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Helpers.CoinHelper.Top">
            <summary>
            BTC,ETH,BNB,XRP,TRX - i.e. symbols that might serve as quote asset in trading pairs
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Helpers.IRankHelper.GetRank(System.Decimal,System.String)">
            <summary>
            estimates trade total rank
            was it a micro trade or a large one
            the greater rank the larger the trade was
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Helpers.MarketDataGenerator.GenerateAsc(System.Int32,System.Int32,AVS.CoreLib.Trading.Enums.TimeFrame)">
            <summary>
            Generate random series of bars in ascending price movement
            </summary>
            <param name="length">bar series length</param>
            <param name="bullFactor">how many bullish bars should be in a row</param>
            <param name="timeframe"></param>
        </member>
        <member name="T:AVS.CoreLib.Trading.Helpers.TradingPairHelper">
            <summary>
            helps to generate trading pairs (aka symbols) combining quote and base currencies
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Helpers.TradingPairHelper.CombineAll(System.String[],System.String[])">
            <summary>
            combines all quote assets with all base assets
            e.g. ["USDT","BUSD"] + ["BTC","XRP"] => ["BTC_USDT","BTC_BUSD", "XRP_USDT","XRP_BUSD"]
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Helpers.TradingPairHelper.CombineWithQuoteAssets(System.String,System.String[])">
            <summary>
            combines base asset with quote asset(s)
            e.g. "BTC" + ["USDT","BUSD"] => ["BTC_USDT","BTC_BUSD"]
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Helpers.TradingPairHelper.Combine(System.String,System.String[])">
            <summary>
            combine <see cref="!:quoteCurrency"/> with <see cref="!:baseCurrencies"/>
            e.g. USDT + [BTC,ETH,XRP] => [BTC_USDT, ETH_USDT, XRP_USDT]
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Models.Balance.BalanceBook.Count">
            <summary>
            Gets the number of currencies in balance book 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Models.Balance.BalanceBook.Parse(System.String)">
            <summary>
            Can parse BalanceBook from strings like "0.2 BTC;10 USD; 25 TRX;0.05 ETH" 
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Prices.PriceHelper.Prices">
            <summary>
            these are indicative prices for purposes like ranking coins by value relative to other coins
            indicative means for example BTC is ~10 times bigger than ETH or ~100 times bigger than BCH, LTC etc. 
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Symbols.SymbolDescriptor">
            <summary>
            descriptors should help to classify coin-zoo 
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.Symbols.SymbolDescriptor.Markets">
            <summary>
            what exchanges have trading pairs with this symbol possible values
            - `*` - widely accepted listed on many exchanges e.g. LTC
            - `Binance+` - listed on Binance and other markets
            - `Binance!` - listed on Binance but not listed on other big markets usually new listings on Binance 
            - `Gate` - listed on gate.io i.e. not listed on Binance
            - `DEX` - listed on DEX only
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Symbols.SymbolDescriptor.Blud(System.String,System.Int32,System.String,AVS.CoreLib.Trading.Enums.CoinType)">
            <summary>
            Блудняк like DOGE, FLOKI etc.
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Symbols.SymbolDescriptorService.GetDescriptors(AVS.CoreLib.Abstractions.IQuery{AVS.CoreLib.Trading.Symbols.SymbolDescriptor})">
            <summary>
            Get descriptors filtered by <see cref="T:AVS.CoreLib.Abstractions.IQuery`1"/>
            you can use <see cref="T:AVS.CoreLib.Trading.Symbols.SymbolDescriptorsQuery"/> or your own implementation
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.TA.Builders.IHOC">
            <summary>
            Higher order calculator
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.TA.Calculators.MovingAverages.EMACalculator">
            <summary>
            EMA=Price​×k +EMA[1]​×(1−k) where k=2/(n+1)
            EMA = EMA[1]​ + k*(Price - EMA[1]​)
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.TA.Calculators.MovingAverages.EMACalculator.Alpha">
            <summary>
            by default Alpha = 2.0m / (period + 1)
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.TA.Calculators.MovingAverages.SMACalculator">
            <summary>
            SMA= SUM(price)/n
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.TA.Calculators.Oscillators.ADXCalculator">
            <summary>
            DI+ = EMA(High - High[1] >=0 ? High - High[1] : 0, 14) / ATR*100  
            DI- =  EMA(Low[1] - Low >=0  ? Low[1] - Low : 0, 14) / ATR*100
            ADX = SMA(abs(DI+ - DI-) / (DI+ + DI-), 14)*100 
            Histogram = DI+ - DI- 
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.TA.Calculators.Oscillators.MACDCalculator">
            <summary>
            MACD = ЕМА(Period1) − EMA(Period2)
            Signal Line = EМА(MACD, 9)
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.TA.Calculators.Oscillators.MACDCalculator.Period1">
            <summary>
            Fast EMA period        
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.TA.Calculators.Oscillators.MACDCalculator.Period2">
            <summary>
            Slow EMA period        
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.TA.Calculators.Oscillators.MACDCalculator.Period3">
            <summary>
            Signal line period
            (signal line is a smoothed macd line)
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.TA.Calculators.Oscillators.RSICalculator">
            <summary>
            RSI = 100 - 100 /(1+RS), 
            RS= SUM(Bullish bars lengths) / SUM(Bearish bars lengths)
            </summary>    
        </member>
        <member name="T:AVS.CoreLib.Trading.TA.Calculators.Oscillators.StochCalculator">
            <summary>
                stoch = 100 *[(Сlose - Low(n)) / (High(n) - Low(n))]
            	%K = ta.sma(ta.stoch(close, high, low, period1), period2)
            	%D = ta.sma(k, period3)
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.TA.Functions.Ema.Alpha">
            <summary>
            by default Alpha = 2.0m / (period + 1)
            but for RSI for example, Alpha = 1 / period;
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.TA.Functions.MovingStatistic">
            <summary>
            Utility class to get moving statistic for some period
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.TA.Functions.MovingStatistic.Change">
            <summary>
            price change absolute 
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.TA.Functions.MovingStatistic.PriceChange">
            <summary>
            price change in %
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.TA.Indicators.MA">
            <summary>
            Describe moving average value for a certain point (bar)
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.TA.Tools.TAExt">
            <summary>
            Defines an interface to TA bar extension (ITAExt)
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.TA.XBar">
            <summary>
            Represent bar extension that aggregate top (main) TA indicators MA (21, 50), BB, etc.
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.TA.XBar.Avg">
            <summary>
            (Open+Close)/2
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.TA.XBar.Hl2">
            <summary>
            (High+Low)/2
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.TA.XBar.Hlc3">
            <summary>
            (High+Low+Close)/3
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Trading.TA.XBar.SizeAbs">
            <summary>
            Indicates bar size (length) relative to avg bar length
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Types.CurrencyPair">
            <summary>
            in `BTC_USDT`, BTC is a base currency, USDT is a quote currency
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Types.CurrencyPair.Parse(System.String,System.Boolean)">
            <summary>
            Parse <see cref="T:AVS.CoreLib.Trading.Types.CurrencyPair"/> instance from symbol/pair string
            </summary>
            <param name="value">symbols like `BTC_USDT` or pairs like 'BTC/USDT' </param>
            <param name="isBaseCurrencyFirst">base currency in `BTC_USDT` is BTC</param>
        </member>
        <member name="T:AVS.CoreLib.Trading.Types.CurrencyValue">
            <summary>
            Represents values like 10.00 UAH, 2.2 XRP etc.
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Types.CurrencyValue.Parse(System.String)">
            <summary>
            parses string for the value
            </summary>
            <param name="str">"100.00 UAH"</param>
        </member>
        <member name="T:AVS.CoreLib.Trading.Types.Symbol">
            <summary>
            Symbol represent a trade instrument, most exchanges operate symbols 
            <see cref="T:AVS.CoreLib.Trading.Types.Symbol"/> format convention is [base_currency]_[quote_currency] e.g. BTC_USDT
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Trading.Types.SymbolPattern">
            <summary>
            Represents a symbol pattern which could be on of 7 pattern types <see cref="T:AVS.CoreLib.Trading.Types.SymbolPattern.PatternType"/>
            e.g. `*`, `USD*`, `FIAT` (means fiat currencies), `ETH`, `*_ETH`, `ETH_*`, `BTC_USDT,ETH_USDT`, `ETH_USDT`
            SymbolPattern is designed to filter/match symbol(s) 
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Types.SymbolPattern.ANY">
            <summary>
            * means any symbol is ok 
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Types.SymbolPattern.USD_LIKE">
            <summary>
            USD* means USD + USDT,USDC,BUSD,DAI etc. 
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Types.SymbolPattern.TOP_COINS">
            <summary>
            BTC* means BTC + ETH,BNB,TRX etc. i.e. any TOP symbol that might serve as a quote symbol in trading pairs
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Types.SymbolPattern.STABLECOIN">
            <summary>
            USDT* means USDT + USDC,BUSD,USDJ,USDD,TUSD,VAI,DAI etc. i.e. any stable or pegged coin
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Types.SymbolPattern.FIAT">
            <summary>
            FIAT means USD,EUR,UAH etc. <see cref="T:AVS.CoreLib.Trading.Enums.Fiat"/>
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Types.SymbolPattern.MatchAny(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            if any match found returns true, otherwise false
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Types.SymbolPattern.MatchLiteral(System.String,System.String)">
            <summary>
            match given symbol with one of literals (<see cref="F:AVS.CoreLib.Trading.Types.SymbolPattern.ANY"/>, <see cref="F:AVS.CoreLib.Trading.Types.SymbolPattern.FIAT"/> etc.)
            returns true if matches, otherwise - false
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Trading.Types.SymbolPattern.From(System.String[],System.String)">
            <summary>
            Creates a symbol pattern 
            Takes symbols apply filter if any symbol(s) are dropped than it combines rest of symbols into comma-separated symbols pattern, otherwise return symbol as is
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Types.SymbolPattern.PatternType.Any">
            <summary>
            *
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Types.SymbolPattern.PatternType.Literal">
            <summary>
            FIAT or USD*
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Types.SymbolPattern.PatternType.Symbol">
            <summary>
            exact symbol e.g. BTC_USD
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Types.SymbolPattern.PatternType.MultiSymbol">
            <summary>
            comma-separated symbols e.g. BTC_USDT,ETH_BTC
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Types.SymbolPattern.PatternType.Asset">
            <summary>
            e.g.`ETH` means any pair with ETH as a base or quote asset
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Types.SymbolPattern.PatternType.QuoteAsset">
            <summary>
            *_USDT means any pair quoted to USDT 
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Trading.Types.SymbolPattern.PatternType.BaseAsset">
            <summary>
            ATOM_* means any pair with ATOM as a base asset
            </summary>
        </member>
    </members>
</doc>
