using System;
using System.Globalization;
using System.Numerics;
using AVS.CoreLib.Dates;

namespace AVS.CoreLib.Utilities
{
    public static class NonceHelper
    {
        private static BigInteger CurrentHttpPostNonce { get; set; }
        /// <summary>
        /// returns an incremental numerical value (>0) as string.
        /// The incremental means value never reiterate or decrease.
        /// </summary>
        /// <remarks>
        /// nonce is a similar concept to a tonce (<see cref="GetTonce"/>),
        /// but it is typically a random string of characters or a number that is generated by the client.
        /// The server checks the nonce to ensure that it has not been used before, and therefore helps to prevent replay attacks.
        /// </remarks>
        /// <returns></returns>
        public static string GetNonce()
        {
            var totalms = DateTime.UtcNow.Subtract(UnixEpoch.Start).TotalMilliseconds;
            var newHttpPostNonce = new BigInteger(Math.Round(totalms * 1000, MidpointRounding.AwayFromZero));
            if (newHttpPostNonce > CurrentHttpPostNonce)
            {
                CurrentHttpPostNonce = newHttpPostNonce;
            }
            else
            {
                CurrentHttpPostNonce += 1;
            }

            return CurrentHttpPostNonce.ToString(CultureInfo.InvariantCulture);
        }

        /// <summary>
        /// returns number of milliseconds elapsed since unix epoch
        /// <see cref="DateTimeOffset.ToUnixTimeMilliseconds"/>
        /// (based on <see cref="DateTimeOffset.Now"/>)
        /// </summary>
        /// <remarks>
        /// `tonce` is a unique identifier based on the current time expressed as the number of milliseconds since unix epoch.
        /// It is used to ensure that each request is unique, even if multiple requests are made in quick succession.
        /// </remarks>
        public static long GetTonce(bool inMilliseconds = true)
        {
            var offset = DateTimeOffset.Now;
            return inMilliseconds ? offset.ToUnixTimeMilliseconds() : offset.ToUnixTimeSeconds();
        }

        
        [Obsolete("use GetTonce().ToString()")]
        public static string GetTonceOld()
        {
            return DateTimeOffset.Now.ToUnixTimeMilliseconds().ToString();
        }

        /// <summary>
        /// returns number of milliseconds elapsed since unix epoch
        /// <see cref="DateTimeOffset.ToUnixTimeMilliseconds"/>
        /// (based on <see cref="DateTimeOffset.UtcNow"/>)
        /// </summary>
        public static long GetTimestamp()
        {
            return DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        }
    }
}