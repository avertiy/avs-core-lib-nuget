<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AVS.CoreLib.Text</name>
    </assembly>
    <members>
        <member name="T:AVS.CoreLib.Text.Extensions.ConsoleColorExtensions">
            <summary>
            ConsoleColor extensions
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Extensions.ConsoleColorExtensions.ToColorSchemeString(System.ConsoleColor)">
            <summary>
            Converts <see cref="T:System.ConsoleColor"/> to ColorScheme string representation
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Text.Extensions.JsonExtensions">
            <summary>
            Json extensions
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Extensions.JsonExtensions.ToJsonString``1(``0,System.Boolean)">
            <summary>
            Converts the value of a type specified into a JSON string through <see cref="T:System.Text.Json.JsonSerializer"/>
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Extensions.JsonExtensions.ToJsonString``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the value of a type specified into a JSON string through <see cref="T:System.Text.Json.JsonSerializer"/>
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Text.Extensions.ServiceCollectionExtension">
            <summary>
            Service collection extension methods
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Extensions.ServiceCollectionExtension.AddCustomFormatters(Microsoft.Extensions.DependencyInjection.IServiceCollection,AVS.CoreLib.Text.Formatters.CustomFormatter[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Extensions.ServiceCollectionExtension.AddCustomFormatter``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Extensions.ServiceCollectionExtension.AddFormatterForType``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[],System.Func{System.String,``0,System.String})">
            <summary>
            Register formatter for type
            <see cref="T:AVS.CoreLib.Text.Formatters.CompositeFormatter"/>
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Extensions.ServiceCollectionExtension.ConfigureCompositeFormatter(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{AVS.CoreLib.Text.Formatters.CompositeFormatter})">
            <summary>
            Configure composite formatter (it used to register/remove type formatters)
            <see cref="T:AVS.CoreLib.Text.Formatters.CompositeFormatter"/>
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Text.Extensions.StringBuilderExtensions">
            <summary>
            StringBuilder extensions
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Extensions.StringBuilderExtensions.XAppend(System.Text.StringBuilder,System.FormattableString)">
            <summary>
            Append X.Format(str)
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Extensions.StringBuilderExtensions.EnsureWhitespace(System.Text.StringBuilder)">
            <summary>
            If StringBuilder content is not empty and the last character is neither a whitespace ' ', neither '\t' or '\n'
            append a whitespace ' '
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Extensions.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String,System.Int32,System.Boolean)">
            <summary>
            Returns the index of the start of the contents in a StringBuilder
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="value">The string to find</param>
            <param name="startIndex">The starting index.</param>
            <param name="ignoreCase">if set to <c>true</c> it will ignore case</param>
            <returns></returns>
        </member>
        <member name="T:AVS.CoreLib.Text.FormatPreprocessors.EnumFormatPreprocessor">
            <summary>
            That's an example of the idea with format preprocessors
            Enum format preprocessor highlight enum values
            values matches to default enum value will be gray otherwise blue
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Text.FormatPreprocessors.EnumFormatPreprocessor.DefaultColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Text.FormatPreprocessors.EnumFormatPreprocessor.Color">
            <summary>
            
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormatPreprocessors.EnumFormatPreprocessor.GetFormat(System.Type,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormatPreprocessors.EnumFormatPreprocessor.Process(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:AVS.CoreLib.Text.FormatPreprocessors.FormatPreprocessor">
            <summary>
            Composite format preprocessor
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormatPreprocessors.FormatPreprocessor.Process(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AVS.CoreLib.Text.FormatPreprocessors.FormatPreprocessor.Add(AVS.CoreLib.Text.FormatPreprocessors.IFormatPreprocessor)">
            <summary>
            Add FormatPreprocessor
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormatPreprocessors.FormatPreprocessor.Clear">
            <summary>
            Clear all preprocessors
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Text.FormatPreprocessors.IFormatPreprocessor">
            <summary>
            Argument format preprocessor
            it allows to modify format of arguments of <see cref="T:System.FormattableString"/> just before converting to string
            i.e. <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/> is called
            
            the purpose of the modifier is to add some behavior for adding color formatting to string arguments if color was not specified   
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormatPreprocessors.IFormatPreprocessor.Process(System.String,System.Object)">
            <summary>
            Modify argument string format
            </summary>
            <returns>new argument format</returns>
        </member>
        <member name="T:AVS.CoreLib.Text.FormatProviders.XFormatProvider">
            <summary>
            Extend standard string format modifiers like N2, C etc. with custom formatters and modifiers
            <see cref="T:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupFormatter"/>
            <see cref="T:AVS.CoreLib.Text.Formatters.NotEmptyFormatter"/>
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Text.FormatProviders.XFormatProvider.Formatter">
            <summary>
            Formatter returned by <seealso cref="M:AVS.CoreLib.Text.FormatProviders.XFormatProvider.GetFormat(System.Type)"/>
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormatProviders.XFormatProvider.#ctor">
            <summary>
            C-tor
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormatProviders.XFormatProvider.AppendFormatter(AVS.CoreLib.Text.Formatters.CustomFormatter)">
            <summary>
            Append custom formatter
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormatProviders.XFormatProvider.ConfigureCompositeFormatter(System.Action{AVS.CoreLib.Text.Formatters.CompositeFormatter})">
            <summary>
            Configure composite formatter
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormatProviders.XFormatProvider.GetFormat(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:AVS.CoreLib.Text.FormattableString2">
            <summary>
            Extends <see cref="T:System.FormattableString"/> with some additional functionality
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableString2.#ctor(System.String,System.Object[])">
            <summary>
            C-tor
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableString2.#ctor(System.FormattableString)">
            <summary>
            C-tor
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Text.FormattableString2.Item(System.Int32)">
            <summary>
            Indexer get/set argument by index 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableString2.GetFormat(System.Int32)">
            <summary>
            get format for an argument at specified index
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Text.FormattableString2.Format">
            <inheritdoc />
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableString2.GetArguments">
            <inheritdoc />
        </member>
        <member name="P:AVS.CoreLib.Text.FormattableString2.ArgumentCount">
            <inheritdoc />
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableString2.GetArgument(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableString2.ToString(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableString2.ToString(System.IFormatProvider,AVS.CoreLib.Text.FormatPreprocessors.IFormatPreprocessor,AVS.CoreLib.Text.TextProcessors.ITextProcessor)">
            <summary>
            Preprocess format of arguments before formatting string, format string and process the result with text processor 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableString2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableString2.ToString">
            <inheritdoc />
        </member>
        <member name="T:AVS.CoreLib.Text.FormattableStringBuilder">
            <summary>
            usage:
             var sb = new FormattableStringBuilder();
             sb.Append($"x = {x}").Append($"y = {y}");
             var fs = b.ToFormattableString();
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableStringBuilder.ToFormattableString">
            <summary>
            Creates <see cref="T:System.FormattableString"/>
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableStringBuilder.ToString">
            <inheritdoc />
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableStringBuilder.AppendRaw(System.String)">
            <summary>
            append raw string
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableStringBuilder.Append(System.Object)">
            <summary>
            Append argument
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.FormattableStringBuilder.Append(System.FormattableString)">
            <summary>
            append FormattableString
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupFormatter">
            <summary>
            format argument keeping color formatting i.e "{DateTime.Now:-Red --Yellow d}" => "{01/01/2020:-Red --Yellow}"
            it is assumed color format is at the begging
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupFormatter.CustomFormat(System.String,System.Object,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupFormatter.Match(System.String)">
            <inheritdoc />
        </member>
        <member name="T:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupHelper">
            <summary>
            provides color markup text utilities
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupHelper.HasAnyColorMarkup(System.String)">
            <summary>
            match text with any color markup (i) text {arg:-Red}  (ii) some text@:Color
            returns true if match success, false otherwise
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupHelper.HasColorMarkup(System.String)">
            <summary>
            match text with color markup regex e.g. text {arg:-Red --Blue}
            returns true if match success, false otherwise
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupHelper.HasColorMarkup2(System.String,System.String@,System.Int32@)">
            <summary>
            match text with color markup2 regex e.g. some text@:-Red
            returns true if match success, false otherwise
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupHelper.StripColorMarkup(System.String)">
            <summary>
            remove color markup from the text
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupHelper.StripColorMarkup2(System.String)">
            <summary>
            remove color markup2 from the text e.g. "text@:Red" => "text"
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupHelper.FormatWithColor(System.String,System.ConsoleColor)">
            <summary>
            format plain text into color markup text e.g. FormatColor("str", Green) => {"str":-Green}; 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupHelper.ColorizePlainText(System.String,System.Nullable{System.ConsoleColor})">
            <summary>
            Colorize plain text within a text that might contain color markup
            </summary>
            <remarks>
            if text does not contain a color markup, use <see cref="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupHelper.FormatWithColor(System.String,System.ConsoleColor)"/>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupHelper.TryParse(System.String,System.Nullable{System.ConsoleColor}@,System.Nullable{System.ConsoleColor}@)">
            <summary>
            Parse color markup e.g. "{arg:-Reg --Black}", also short representation "{arg:-Reg}" or "{arg:--Reg}" 
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupString">
            <summary>
            ColorMarkupString is a string wrapper allows to iterate string through markup blocks in tuples (string plainText, string color scheme, string coloredText)
            color markup string looks similar to format string "some plain text {text:-ForegroundColor} some other plain text {text:--BackgroundColor}"
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupString.regex">
            <summary>
            parses text and color scheme {text:-ForegroundColor --BackgroundColor}
            regex is not strict 
            </summary>
        </member>
        <member name="F:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupString.regex2">
            <summary>
            match colorized string like @:Color e.g. "some text@:Red"
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupString.Value">
            <summary>
            initial string
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupString.#ctor(System.String)">
            <summary>
            C-tor 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupString.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupString.op_Explicit(System.String)~AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupString">
            <summary>
            creates ColorMarkupString from str
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupString.ToString">
            <inheritdoc />
        </member>
        <member name="P:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupString.HasMarkup">
            <summary>
            match <see cref="P:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupString.Value"/> with color markup regex
            returns true if match success, false otherwise
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Text.Formatters.CompositeFormatter">
            <summary>
            Generic formatter allows to register a type formatter on the fly
            without the need to implement CustomFormatter 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.CompositeFormatter.AddTypeFormatter``1(System.String[],System.Func{System.String,``0,System.String})">
            <summary>
            Register type formatter 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.CompositeFormatter.RemoveTypeFormatter``1">
            <summary>
            Remove type formatter
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.CompositeFormatter.CustomFormat(System.String,System.Object,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.CompositeFormatter.NoFormat(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.CompositeFormatter.Match(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.CompositeFormatter.ToString">
            <inheritdoc />
        </member>
        <member name="T:AVS.CoreLib.Text.Formatters.CustomFormatter">
            <summary>
            base abstract class for custom format providers
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Text.Formatters.CustomFormatter.Next">
            <summary>
            points to the next formatter when few formatters are combined into one 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.CustomFormatter.AppendFormatter(AVS.CoreLib.Text.Formatters.CustomFormatter)">
            <summary>
            
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.CustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.CustomFormatter.NoFormat(System.Object)">
            <summary>
            convert arg to string when format symbol is missing i.e. format is null or empty
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.CustomFormatter.CustomFormat(System.String,System.Object,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.CustomFormatter.Match(System.String)">
            <summary>
            Matches the format qualifier
            when True - CustomFormat(format, arg) is called
            when False - DefaultFormat(format, arg) is called
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.CustomFormatter.DefaultFormat(System.String,System.Object,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.CustomFormatter.GetFormat(System.Type)">
            <summary>
            
            </summary>
            <param name="formatType"></param>
            <returns></returns>
        </member>
        <member name="T:AVS.CoreLib.Text.Formatters.ITypeFormatter">
            <summary>
            Type formatter interface
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Text.Formatters.ITypeFormatter.Qualifiers">
            <summary>
            string format qualifier
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.ITypeFormatter.Format(System.String,System.Object)">
            <summary>
            format argument 
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Text.Formatters.NotEmptyFormatter">
            <summary>
            if argument format starts with "!"  than in case argument is empty or (0 for numeric types, MinValue etc.) than returns string.Empty 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.NotEmptyFormatter.CustomFormat(System.String,System.Object,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.NotEmptyFormatter.Match(System.String)">
            <inheritdoc />
        </member>
        <member name="T:AVS.CoreLib.Text.Formatters.TypeFormatter`1">
            <summary>
            Type formatter
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Text.Formatters.TypeFormatter`1.Qualifiers">
            <summary>
            string format qualifies
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.TypeFormatter`1.#ctor(System.String[],System.Func{System.String,`0,System.String})">
            <summary>
            C-tor
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.Formatters.TypeFormatter`1.Format(System.String,System.Object)">
            <summary>
            Format argument, argument should be convertible to type T 
            </summary>
        </member>
        <member name="T:AVS.CoreLib.Text.TextProcessors.ITextProcessor">
            <summary>
            interface for text processor that might be used to process input string  
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.TextProcessors.ITextProcessor.Process(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:AVS.CoreLib.Text.TextProcessors.TextExpressionProcessor">
            <summary>
            if string starts with @ symbol it is treated as string with expressions: `anything:value` or `anything:value;`
            where value is tested whether it is empty or not, if it is empty the whole expression will not be included in result string
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.TextProcessors.TextExpressionProcessor.Process(System.String)">
            <inheritdoc />
        </member>
        <member name="T:AVS.CoreLib.Text.X">
            <summary>
            X is just a short notation
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Text.X.FormatProvider">
            <summary>
            Extends .NET string format modifiers like N2, d, C etc. with custom formatters
            (e.g. ColorFormatter, NotEmptyFormatter, PriceFormatter, EnumFormatter etc) 
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Text.X.TextProcessor">
            <summary>
            string started with "@..." considered as text expression for TextProcessor
            by default X.Format uses <seealso cref="T:AVS.CoreLib.Text.TextProcessors.TextExpressionProcessor"/> as TextProcessor
            </summary>
        </member>
        <member name="P:AVS.CoreLib.Text.X.FormatPreprocessor">
            <summary>
            allows to preprocess/modify argument's format 
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.X.Format(System.FormattableString)">
            <summary>
            Format string using <see cref="T:AVS.CoreLib.Text.FormatProviders.XFormatProvider"/>
            
            <see cref="T:AVS.CoreLib.Text.Formatters.NotEmptyFormatter"/> format symbol: !
            in case argument is null, empty (0 for numeric types, MinValue for datetime etc.) such arg is replaced with string.Empty $"{0:!}" => "";
            
            <see cref="T:AVS.CoreLib.Text.Formatters.ColorMarkup.ColorMarkupFormatter"/> format symbol: -Color (foreground color) --Color (background color)
            put color markup $"{arg:-Red}" => "$$arg:-Red$"
            <remarks>color markup is used by PowerConsole</remarks>
             
            <see cref="T:AVS.CoreLib.Text.Formatters.CompositeFormatter"/> by default does not include any formatters
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.X.Format(System.FormattableString,AVS.CoreLib.Text.FormatPreprocessors.IFormatPreprocessor)">
            <summary>
            applies format modifier before string format and there after process the result with <see cref="T:AVS.CoreLib.Text.TextProcessors.TextExpressionProcessor"/>
            </summary>
        </member>
        <member name="M:AVS.CoreLib.Text.X.Format(AVS.CoreLib.Text.FormattableString2,AVS.CoreLib.Text.FormatPreprocessors.IFormatPreprocessor)">
            <summary>
            Format <see cref="T:System.FormattableString"/> string to string
            </summary>
            <param name="str">string</param>
            <param name="preprocessor">if not null each argument format is preprocessed by preprocessor</param>
        </member>
        <member name="M:AVS.CoreLib.Text.X.Format(System.FormattableString,AVS.CoreLib.Text.FormatPreprocessors.IFormatPreprocessor,AVS.CoreLib.Text.TextProcessors.ITextProcessor)">
            <summary>
            Format <see cref="T:System.FormattableString"/> string to string
            </summary>
            <param name="str">string</param>
            <param name="preprocessor">if not null each argument format is preprocessed by preprocessor</param>
            <param name="textProcessor"><see cref="P:AVS.CoreLib.Text.X.TextProcessor"/></param>
        </member>
    </members>
</doc>
