using System;
using System.Text.RegularExpressions;
using AVS.CoreLib.PowerConsole.Printers;
using AVS.CoreLib.PowerConsole.Utilities;

namespace AVS.CoreLib.PowerConsole
{
    public static partial class PowerConsole
    {
        /// <summary>
        /// Format string calling <see cref="Format"/> delegate
        /// than create a <see cref="ColorFormattedString"/> and print it
        /// </summary>
        public static void PrintF(FormattableString str, bool endLine = true)
        {
            var formattedString = Format(str);
            Print(new ColorFormattedString(formattedString), endLine);
        }

        /// <summary>
        /// Using color argument create a <see cref="ColorScheme"/> and apply it
        /// Format string calling <see cref="Format"/> delegate
        /// you can pass <see cref="ColorFormattedString"/> to print colored text 
        /// </summary>
        public static void PrintF(FormattableString str, ConsoleColor color, bool endLine = true)
        {
            var formattedString = Format(str);
            var scheme = new ColorScheme(color);
            ApplyColorScheme(scheme);
            //1. x-formatted string might contain color formatting: $$text:--Color$
            //Table/Square/Header tag formatters are not implemented yet
            //but the idea is to parse tags: 
            //<table><header>Column1|Col2|EmptyColumn</header><body><cell>$$text:-Red$</cell>... </table> - prints table
            //<square size='5x5'>abc</square>  - prints text inside of square 5x5
            //<h1>title</h1>  - prints title with corresponding to h1 font-size and font-weight default setup
            //<h2>title</h2>  - prints title with corresponding to h2 font-size and font-weight default setup

            //text expressions also could be done with tags:
            //<expr>description:value</expr>
            //<table><thead>Column1|Column2</thead><tr><td>cell1</td><td>cell2</td></tr></body></table>

            //i.e. we need here somehow process line by line highlight etc.
            //XFormattedStringFactory.Create(formattedString) => ColorFormattedString or TableFormatted or something else

            Print(new ColorFormattedString(formattedString), endLine);
            ColorSchemeReset();
        }

        public static void PrintF<T>(T value)
        {
            if (GenericPrinter.Instance.Print(value) == false)
            {
                Print(value.ToString());
            }
        }

        public static void PrintF(int posX, int posY, FormattableString str, bool endLine = true)
        {
            var formattedString = Format(str);
            var rows = Regex.Matches(formattedString, Environment.NewLine).Count;
            ClearRegion(posX, posY, rows);
            Print(new ColorFormattedString(formattedString), endLine);
        }

        public static void PrintF(int posX, int posY, string str, bool endLine = true)
        {
            var rows = Regex.Matches(str, Environment.NewLine).Count;
            ClearRegion(posX, posY, rows);
            Print(new ColorFormattedString(str), endLine);
        }

        public static void PrintF(int posX, int posY, string str, ConsoleColor color, bool endLine = true)
        {
            var rows = Regex.Matches(str, Environment.NewLine).Count;
            ClearRegion(posX, posY, rows);
            var scheme = new ColorScheme(color);
            ApplyColorScheme(scheme);
            Print(new ColorFormattedString(str), endLine);
            ColorSchemeReset();
            ClearLine();
        }
    }
}
